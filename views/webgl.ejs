<!DOCTYPE html>
<html lang="en">
	<head>
        <%- include partials/head %>
		<title>three.js webgl - interactive cubes</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
        <style>
        #controls
        {
            bottom: 0;
            left: 0;
            position: absolute;
            width: 100%;
        }
        </style>
	</head>
	<body class = "bgcolor">

    
    <!---->
    <div class = "modal" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content" id = "modal-content">

                <div class="modal-header">
                    <h4 id = "name"></h4>
                    <h4 id = "balls" style = "margin-left : 10px"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body" id = "modal-body">
                <textarea readonly id = "description" class = "form-control" rows = "20"  placeholder = "Enter description"></textarea>

                </div>

                <div class="modal-footer">
                    <input type = "file" name = "ansver" id = "ansver" style = "width : 220px"><br>
                    <button type="button" class="btn btn-light" id = "submit">Submit</button>
                </div>
            </div>
        </div>
    </div>
    <!---->
    
    <script src = "https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src = "https://unpkg.com/@reactivex/rxjs@5.3.0/dist/global/Rx.js"></script>
    <script src = "https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src = "/javascripts/lib/three.js"></script>
    <script src = "/javascripts/lib/OrbitControls.js"></script>
    <script src = "/javascripts/lib/WebGL.js"></script>
    <script src = "/javascripts/lib/Tween.js"></script>
    <script src = "/javascripts/lib/DragControls.js"></script>

    <script src = "/javascripts/lib/ejs.js"></script>

    <script>
    const courseId = "<%=courseId%>";
    const courseName = "<%=courseName%>";

    function CreateGraph(items, root, user, teacher) {

        // console.log(items, "!", root, "!", user, "!", teacher);

        let curNodeId;
        let _selected;

        let camera, scene, renderer;

        const cameraSpeed = 5;

        let width = window.innerWidth;
        let height = window.innerHeight;
        let canvas = document.getElementById('canvas' );
        
        canvas.setAttribute('width', width);
        canvas.setAttribute('height', height);

        //nodes
        let mynodes = items;
        let _root = root;
        //

        //dataOfGraph
        let nodes = [];
        let connections = [];
        //

        //renderer
        renderer = new THREE.WebGLRenderer({canvas: canvas, antialias : true});
        //
        
        //scene
        scene = new THREE.Scene();
        scene.background = new THREE.Color( 0xeeeeee );
        //

        //light
        let lights = [];
        lights[ 0 ] = new THREE.PointLight( 0xffffff, 1, 0 );
        lights[ 1 ] = new THREE.PointLight( 0xffffff, 1, 0 );
        lights[ 2 ] = new THREE.PointLight( 0xffffff, 1, 0 );
        lights[ 0 ].position.set( 0, 200, 0 );
        lights[ 1 ].position.set( 100, 200, 100 );
        lights[ 2 ].position.set( - 100, - 200, - 100 );
        scene.add( lights[ 0 ] );
        scene.add( lights[ 1 ] );
        scene.add( lights[ 2 ] );
        //

        //camera
        camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 10000);
        camera.position.set(0, 0, 400);
        //

        //controls
        let controls = new THREE.OrbitControls( camera );
        controls.minPolarAngle = Math.PI/3;
        controls.maxPolarAngle = Math.PI/3;
        controls.target.set( 0, -125, 0 );
        controls.update();
        //

        //shpere 
        let geometryNode = new THREE.SphereGeometry(10, 16, 16);
        let materialNode = new THREE.MeshLambertMaterial( { color: 0x0000ff } )
        //

        let curCourse = user.courses.find(course => {
            if (course.courseId === courseId) return course;
        });

        //create root
        let __root;
        if (typeof curCourse !== 'undefined') {
            const result = curCourse.nodes.filter(node => node.id === _root._id);
            if (result.length > 0) __root = new THREE.Mesh(new THREE.SphereGeometry(12, 16, 16), new THREE.MeshLambertMaterial( { color: 0x003300 } ));
            else __root = new THREE.Mesh(new THREE.SphereGeometry(12, 16, 16), new THREE.MeshLambertMaterial( { color: 0x000033 } ));
        }
        scene.add(__root);
        __root.userData.id = _root._id;
        __root.userData.childs = _root.childs;
        __root.userData.parents = _root.parents;
        __root.userData.task = _root.task;
        __root.userData.root = true;
        __root.userData.active = true;
        __root.position.set(_root.position.x, _root.position.y, _root.position.z);
        nodes.push(__root);
        //
        
        //creating nodes
        for (let i = 0; i < mynodes.length; i++) {
            let mynode = mynodes[i];
            let node;
            if (typeof curCourse !== 'undefined') {
                let result = curCourse.nodes.filter(node => node.id === mynode._id);
                if (result.length > 0) {
                    node = new THREE.Mesh(geometryNode, new THREE.MeshLambertMaterial( { color: 0x005500 } ));
                    node.userData.active = true;
                } else {
                    let availability = true;
                    for (let node of mynode.parents) {
                        let pNodes = curCourse.nodes.filter(curnode => curnode.id === node);
                        if (pNodes.length === 0) availability = false;
                    }
                    if (availability === true) {
                        node = new THREE.Mesh(geometryNode, new THREE.MeshLambertMaterial( { color: 0x000055 } ));
                        node.userData.active = true;
                    }
                    else
                    {
                        node = new THREE.Mesh(geometryNode, new THREE.MeshLambertMaterial( { color: 0x555555 } ));
                        node.userData.active = false;
                    }
                }
            } else node = new THREE.Mesh(geometryNode, new THREE.MeshLambertMaterial( { color: 0x555555 } ));
            scene.add(node);
            node.userData.id = mynode._id;
            node.userData.childs = mynode.childs;
            node.userData.parents = mynode.parents;
            node.userData.task = mynode.task;
            node.position.set(mynode.position.x, mynode.position.y, mynode.position.z);
            nodes.push(node);
        }

        //connection
        let materialConnection = new THREE.MeshBasicMaterial( {color: 0x111111} );
        //

        //creating connections
        mynodes.push(_root);
        for (let i = 0; i < mynodes.length; i++) {
            let current = mynodes[i];
            for (let j = 0; j < current.childs.length; j++) {
                const target = mynodes.find(node => {
                    if (node._id === current.childs[j]) return node;
                });
                const curNode = nodes.find(node => {
                    if (node.userData.id === current._id) return node;
                });
                const targetNode = nodes.find(node => {
                    if (node.userData.id === target._id) return node;
                });
                createConnection(curNode, targetNode);
            }
        }

        function createConnection(curNode, targetNode) {
            const len = curNode.position.distanceTo(targetNode.position) - 28;
            let geometryForCurConnection = new THREE.ConeBufferGeometry(2, len, 4); 
            geometryForCurConnection.rotateX( Math.PI / 2 );

            let connection = {
                target : targetNode.userData.id,
                father : curNode.userData.id,
                cone : new THREE.Mesh(geometryForCurConnection, materialConnection),
                position : new Rx.BehaviorSubject({
                    x : targetNode.position.x,
                    y : targetNode.position.y,
                    z : targetNode.position.z
                }),
                length : new Rx.BehaviorSubject(targetNode.position.distanceTo(curNode.position) - 28)
            }
            scene.add(connection.cone);
            
            connection.position.subscribe(val => {
                connection.cone.position.set((val.x + curNode.position.x) / 2, (val.y + curNode.position.y) / 2, (val.z + curNode.position.z) / 2)
            });

            connection.length.subscribe(val => connection.cone.scale.z = val / len);

            connection.cone.lookAt(targetNode.position);
            connections.push(connection);
        }
        //

        //
        let mouse = new THREE.Vector2(), INTERSECTED, INTERSECTED2;
        let raycaster = new THREE.Raycaster();
        //

        //addEventListener
        document.addEventListener( 'mousemove', onDocumentMouseMove, false );
        document.addEventListener( 'keydown', onDocumentKeyDown, false);

        window.addEventListener( 'resize', onWindowResize, false );
        window.addEventListener( 'dblclick', onDoubleClick, false);

        document.getElementById( 'exit' ).addEventListener( 'click', () => {
            window.location.replace("/courses");
        }, false);

        document.getElementsByClassName("close")[0].addEventListener( 'click', () => {
            modal.style.display = "none";
            controls.enabled = true;
            _selected = null;
        }, false);

        document.getElementById("submit").addEventListener( 'click', () => {
            
            if (document.getElementById("ansver").value !== "" ) {;
                
                let data = new FormData()
                data.append('file', document.getElementById("ansver").files[0]);
                data.append('teacher', teacher);
                data.append('node', _selected.userData.id);
                data.append('courseId', courseId);
                
                fetch('/decision/new', { 
                    method: 'POST',
                    body: data 
                });

                modal.style.display = "none";
                controls.enabled = true;
                _selected = null;
            }
            
        }, false);

        animate();
            

        function removeObjFromScene(id) {
            scene.remove(scene.getObjectByName(id));
        }

        function animate() {
            requestAnimationFrame( animate );
            render();
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize( window.innerWidth, window.innerHeight );
        }

        function onDocumentMouseMove( event ) {
            event.preventDefault();
            mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
            mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
        }

        function render() {
            for ( let i = 0; i < connections.length; i ++ ) {
                const targetNode = nodes.find(node => {
                    if (node.userData.id === connections[i].target) return node;
                });
                const curNode = nodes.find(node => {
                    if (node.userData.id === connections[i].father) return node;
                });

                connections[i].position.next({ x : targetNode.position.x, y : targetNode.position.y, z : targetNode.position.z});
                connections[i].length.next(curNode.position.clone().distanceTo(targetNode.position) - 28);
                connections[i].cone.lookAt(targetNode.position);
            }

            renderer.render( scene, camera );
        }

        function onDoubleClick(event) {
            raycaster.setFromCamera( mouse, camera );
            let intersects = raycaster.intersectObjects( nodes );
            if ( intersects.length > 0 && intersects[0].object.userData.active === true) {
                _selected = intersects[0].object;
                controls.enabled = false;

                document.getElementById( 'name' ).textContent = intersects[0].object.userData.task.name;

                let balls = "";
                let include = false;
                for (let node of curCourse.nodes) {
                    if (node.id === intersects[0].object.userData.id) {
                        balls += `${node.balls}`;
                        include = true;
                    }
                }
                if (include === false) balls += "?";
                balls += "/" + intersects[0].object.userData.task.balls;
                document.getElementById( 'balls' ).textContent = balls;
                
                document.getElementById( 'description' ).textContent = intersects[0].object.userData.task.description;
                curNodeId = intersects[0].object.userData.id;

                modal.style.display = "block";
            }
        };

        function onDocumentKeyDown(event) {
            switch ( event.keyCode ) {
                case 87: {
                    if (camera.position.y < 100) {
                        camera.position.y += cameraSpeed;
                        controls.target.y += cameraSpeed;
                    }

                    break;
                }
                case 83: {
                    camera.position.y -= cameraSpeed;
                    controls.target.y -= cameraSpeed;
                    break;
                }
            }
        };
    }

    window.onload = function() {
        fetch('/users/addCourse', {
            method: 'POST',
            headers: {
                'Accept' : 'application/json',
                'Content-Type' : 'application/json'
            },
            body: JSON.stringify({
                courseId: courseId,
                courseName: courseName
            })
        })
        .then(() => { return fetch(`/courses/graph/${courseId}`).then(x => x.json()) })
        .then((response) => CreateGraph(response.nodes, response.root, response.user ,response.teacher))
        .catch((error) => console.log(error));
        
    }

    const modal = document.getElementById('exampleModalLong');


    // document.getElementsByClassName("close").onclick = function() {
    //     modal.style.display = "none";
    //     controls.enabled = true;
    // }

    </script>
    <menu id="controls" style = "width : 30% !important;">
        <div>To open a task, double-click on the node</div>
    </menu>
    <canvas id = "canvas" style = "width : 100%"></canvas> <!-- style = "margin-left : 25%"-->
    <menu id="controls">
        <button id = "exit" class="btn btn-dark btn-lg right" style = "width : 100px;  margin-right : 20px">Exit</button>
    </menu>
	</body>
</html>